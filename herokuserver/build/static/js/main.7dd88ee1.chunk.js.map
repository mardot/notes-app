{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/note.js","App.js","reportWebVitals.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","Footer","fontStyle","baseUrl","getAll","axios","get","then","response","data","create","newObject","a","post","update","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","length","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7dd88ee1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","const Notification = ({ message }) => {\n  const errorStyle = {\n    color: \"red\",\n    background: \"lightgrey\",\n    fontSize: \"20px\",\n    borderStyle: \"solid\",\n    borderRadius: \"5px\",\n    padding: \"10px\",\n    marginBottom: \"10px\",\n  };\n  // const notErrorStyle = {\n  //   color: \"green\",\n  //   background: \"lightgrey\",\n  //   fontSize: \"20px\",\n  //   borderStyle: \"solid\",\n  //   borderRadius: \"5px\",\n  //   padding: \"10px\",\n  //   marginBottom: \"10px\",\n  // };\n  if (message === null) {\n    return null;\n  }\n\n  return <div style={errorStyle}>{message}</div>;\n};\n\nexport default Notification;\n","const Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Mitchell Elliott 2021</em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import axios from \"axios\";\n\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = async (newObject) => {\n  const response = await axios.post(baseUrl, newObject);\n  return response.data;\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, create, update };\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport Footer from \"./components/Footer\";\n\nimport noteService from \"./services/note\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  // const { notes } = props;\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note ${note.content} was already removed from the server.`\n        );\n        setTimeout(() => {\n          setErrorMessage(\"Timeout occured - Server Disconnected\");\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      id: notes.length + 1,\n      content: newNote,\n      date: new Date().toISOString,\n      important: Math.random() < 0.5,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n      setErrorMessage(\"New note added\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <p>Make a new note:</p>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}